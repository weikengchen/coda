# WARNING: config.yml file is generated from config.yml.jinja
---
version: 3
jobs:
    tracetool:
        docker:
            - image: codaprotocol/coda:toolchain-rust-e855336d087a679f76f2dd2bbdc3fdfea9303be3
        steps:
            - checkout
            - run:
                  name: Update submodules
                  command: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Build trace-tool
                  command: cd src/app/trace-tool && cargo build --frozen

    build-wallet:
        macos:
            xcode: "10.2.0"
        steps:
            - checkout
            - run:
                  name: Update submodules
                  command: git submodule sync && git submodule update --init --recursive
            - run: cd frontend/wallet && yarn
            - run:
                  name: Lint wallet
                  command: cd frontend/wallet && yarn run reformat && git diff --exit-code src
            - run:
                  name: Build wallet
                  command: cd frontend/wallet && yarn run build-ci
            - run:
                  name: Test wallet
                  command: cd frontend/wallet && yarn test
            - run:
                  name: Build dist wallet
                  command: cd frontend/wallet && yarn run dist
            - run:
                  name: Publish dist wallet
                  command: (env HOMEBREW_NO_AUTO_UPDATE=1 brew install awscli) && ./scripts/publish-wallet.sh
            - run:
                  name: Lint website
                  command: cd frontend/website && yarn install && yarn run reformat && git diff --exit-code src
            - run: cd frontend/bot && yarn
            - run:
                  name: Lint bot
                  command: cd frontend/bot && yarn run reformat && git diff --exit-code src
            - run:
                  name: Build bot
                  command: cd frontend/bot && yarn run build-ci

    test-archive:
        resource_class: xlarge
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
              environment:
                CODA_DOCKER: true
            - image: postgres:12
              environment:
                POSTGRES_PASSWORD: codarules
                POSTGRES_USER: admin
                POSTGRES_DB: archiver
        steps:
            - checkout
            - run:
                  name: Update Submodules
                  command: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Set Up Database
                  command: |
                    sudo apt-get install -y postgresql
                    PGPASSWORD=codarules psql -h localhost -p 5432 -U admin -d archiver -a -f src/app/archive/create_schema.sql
            - run:
                  name: Running test -- test_archive_processor:coda-archive-processor-test
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_archive_processor:coda-archive-processor-test"'

    build-archive:
        resource_class: xlarge
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
              environment:
                CODA_DOCKER: true
                HASURA_PORT: 8080
            - image: postgres:12
              environment:
                POSTGRES_PASSWORD: codarules
                POSTGRES_USER: admin
                POSTGRES_DB: archiver
            - image: hasura/graphql-engine:v1.0.0-beta.6
              entrypoint: ["sh", "-c"]
              command: ["sleep 10 && graphql-engine serve"]
              environment:
                HASURA_GRAPHQL_DATABASE_URL: postgres://admin:codarules@localhost:5432/archiver
                HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
                HASURA_GRAPHQL_ENABLED_LOG_TYPES: startup, http-log, webhook-log, websocket-log, query-log
        steps:
            - checkout
            - run:
                  name: Update Submodules
                  command: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Build Archive Process
                  command:  bash -c 'eval `opam config env` && make build_archive'
                  environment:
                    DUNE_PROFILE: testnet_postake_medium_curves
            # NOTE: If we were using a machine executor we would be able to mount the sql file in
            # as a volume for the container to seed itself, this is the workaround.
            # Ideally this DB setup step would be handled by the archive process itself.
            - run:
                  name: Set Up Database
                  command: |
                    sudo apt-get install -y postgresql
                    PGPASSWORD=codarules psql -h localhost -p 5432 -U admin -d archiver -a -f src/app/archive/create_schema.sql
            - run:
                  name: Configure Hasura
                  command: ./scripts/archive/make_hasura_configurations.sh
            - setup_remote_docker
            - run:
                  name: Build and Release Archives
                  command: ./scripts/archive/build-release-archives.sh
    lint:
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Check circle CI configuration rendering
                  command: ./scripts/test.py render --check .circleci/config.yml.jinja .mergify.yml.jinja
            - run:
                  name: OCamlformat (make check-format)
                  command: eval `opam config env` && make check-format
            - run:
                  name: Snarky tracks master (make check-snarky-submodule)
                  command: make check-snarky-submodule
            - run:
                  name: Check ppx_optcomp preprocessor_deps
                  command: ./scripts/lint_preprocessor_deps.sh
            - run:
                  name: Check CODEOWNERS file format
                  command: ./scripts/lint_codeowners.sh
            - run:
                  name: Check RFC ids
                  command: ./scripts/lint_rfcs.sh
            - run:
                  name: Require ppx_coda preprocessing for linting
                  command: ./scripts/require-ppx-coda.py
    lint-opt:
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                name: Show USER
                command: echo $USER
            - run:
                  name: Update Submodules
                  command: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Compare versioned types in PR
                  command: ./scripts/compare_pr_diff_types.sh
    compare-test-signatures:
        docker:
            - image: codaprotocol/coda:toolchain-cf3d5dc87c195afd8eec14a2c4eaf9980004ee26
        steps:
            - checkout
            - run:
                  name: Update Submodules
                  command: git submodule sync && git submodule update --init --recursive
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Compare test signatures for consensus, nonconsensus code
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'eval `opam config env` && ./scripts/compare_test_signatures.sh'
    update-branch-protection:
        docker:
            - image: python:3
        steps:
            - run:
                name: Install dependencies
                command: pip install --user requests jinja2
            - checkout
            - run:
                  name: Update branch protection rule from test configuration
                  command: ./scripts/test.py required-status >required_status && cat required_status && ./scripts/update_branch_rule.py required_status

    build-macos:
        macos:
            xcode: "10.2.1"
        resource_class: large
        working_directory: /Users/distiller/coda
        environment:
            HOMEBREW_LOGS: /Users/distiller/homebrew.log
            OPAMYES: 1
        steps:
            - run:
                name: Delete xcode simulators (Free 10GB - unused)
                command: |
                    sudo rm -rf /Library/Developer/CoreSimulator/Profiles/Runtimes/
                    df -h
                background: true
            - checkout
            - run:
                  name: Update submodules
                  command: git submodule sync && git submodule update --init --recursive
            ### homebrew
            - run:
                name: Create homebrew cache signature file including a year/date stamp to ensure occasional rebuilds
                command: |
                    cat scripts/macos-setup-brew.sh > brew_ci_cache.sig
                    date +%Y-%m > brew_ci_cache.sig
            - restore_cache:
                name: Restore cache - homebrew
                keys:
                    - homebrew-v9-{{ checksum "brew_ci_cache.sig" }}
                    - homebrew-v8-{{ checksum "brew_ci_cache.sig" }}
            - run:
                name: Install macos dependencies - homebrew - macos-setup-brew.sh
                command: |
                    ./scripts/skip_if_only_frontend_or_rfcs.sh ./scripts/macos-setup-brew.sh
            - save_cache:
                name: Save cache - homebrew
                key: homebrew-v9-{{ checksum "brew_ci_cache.sig" }}
                paths:
                    - "/usr/local/Homebrew"
                    - "/Users/distiller/Library/Caches/Homebrew"
            ### opam
            - run:
                name: Create opam cache signature file including a year/date stamp to ensure occasional rebuilds
                command: |
                    cat scripts/macos-setup-opam.sh > opam_ci_cache.sig
                    cat src/opam.export >> opam_ci_cache.sig
                    date +%Y-%m >> opam_ci_cache.sig
            - restore_cache:
                name: Restore cache - opam
                keys:
                    - opam-v8-{{ checksum "opam_ci_cache.sig" }}
            - run:
                name: Install macos dependencies - opam -- make macos-setup-compile
                command: ./scripts/skip_if_only_frontend_or_rfcs.sh make macos-setup-compile
            - save_cache:
                name: Save cache - opam
                key: opam-v8-{{ checksum "opam_ci_cache.sig" }}
                paths:
                    - "/Users/distiller/.opam"
                no_output_timeout: 1h
            ### nix/cachix
            - run:
                name: Install nix and cachix
                command: |
                    curl https://nixos.org/nix/install | sh
                    . ~/.nix-profile/etc/profile.d/nix.sh
                    nix-env -iA cachix -f https://cachix.org/api/v1/install
            ### dune
            - run:
                name: Build ocaml
                environment:
                    DUNE_PROFILE: testnet_postake_medium_curves
                    EXTRA_NIX_ARGS: --option sandbox false
                command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'set -o pipefail; eval `opam config env` && make build 2>&1 | tee /tmp/buildocaml.log'
                no_output_timeout: 20m
            - run:
                name: Build ocaml - generate keypair
                environment:
                    DUNE_PROFILE: testnet_postake_medium_curves
                command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'eval `opam config env` && dune build src/app/generate_keypair/generate_keypair.exe'
                no_output_timeout: 20m
            - run:
                  name: Generate runtime ledger with 10k accounts
                  command: |
                    ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'eval `opam config env` && ./_build/default/src/app/runtime_genesis_ledger/runtime_genesis_ledger.exe -n 10000 -account-file genesis_ledgers/phase_three/genesis_ledger.json'
                  no_output_timeout: 20m
            ### collection
            - run:
                name: Collect Keys and Binaries
                command: |
                    mkdir -p package/keys
                    echo 'keys and genesis'
                    cp /tmp/s3_cache_dir/* package/keys/. ||:
                    cp $TMPDIR/coda_cache_dir/coda_genesis_*.tar.gz package/keys/.
                    echo 'coda'
                    cp _build/default/src/app/cli/src/coda.exe package/coda
                    echo 'libp2p_helper'
                    cp src/app/libp2p_helper/result/bin/libp2p_helper package/coda-libp2p_helper
                    chmod +w package/coda-libp2p_helper
                    ./scripts/librewrite-macos.sh package/coda-libp2p_helper
                    echo 'coda-logproc'
                    cp _build/default/src/app/logproc/logproc.exe package/coda-logproc
                    chmod +wx package/coda-logproc
            - run:
                name: Build homebrew coda package
                command: |
                    tar czvf homebrew-coda.tar.gz package
                    openssl dgst -sha256 homebrew-coda.tar.gz > homebrew-coda.tar.gz.sha256
                    cp homebrew-coda.tar.gz* package/.
            - run:
                name: Build homebrew generate-keypair-phase3 package
                command: |
                    mkdir -p coda-generate-keypair-phase3/package
                    cp _build/default/src/app/generate_keypair/generate_keypair.exe coda-generate-keypair-phase3/package/coda-generate-keypair-phase3
                    pushd coda-generate-keypair-phase3
                    tar czvf homebrew-coda-generate-keypair-phase3.tar.gz package
                    openssl dgst -sha256 homebrew-coda-generate-keypair-phase3.tar.gz > homebrew-coda-generate-keypair-phase3.tar.gz.sha256
                    cp homebrew-* ../package/.
                    popd
            - run:
                name: Decode Apple Certificates
                context: org-global
                command: base64 -D -o Certificates.p12 <<< $APPLE_CERTIFICATES
            - run:
                name: Build portable binary
                command: |
                    make macos-portable
            - run:
                  name: Copy artifacts to cloud
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh scripts/artifacts.sh
            - store_artifacts:
                  path: package

    build-client-sdk:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-cf3d5dc87c195afd8eec14a2c4eaf9980004ee26
        steps:
            - checkout
            - run:
                  name: Artifacts Path
                  command: |
                      mkdir -p /tmp/artifacts
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Pin external packages
                  command: ./scripts/pin-external-packages.sh
            - run:
                  name: Build client SDK for Javascript
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'set -o pipefail; eval `opam config env` && make client_sdk 2>&1 | tee /tmp/artifacts/buildclientsdk.log'
                  environment:
                    DUNE_PROFILE: nonconsensus_medium_curves
                  no_output_timeout: 10m
    build-artifacts--testnet_postake_medium_curves:
        resource_class: xlarge
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                  name: Artifacts Path
                  command: |
                      mkdir -p /tmp/artifacts
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                  name: Pin external packages
                  command: ./scripts/pin-external-packages.sh
            # Explicitly generate PV-keys and uploading before building
            # See https://bkase.dev/posts/ocaml-writer#fn-3 for rationale
            - run:
                  name: Generate PV keys
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'set -o pipefail; eval `opam config env` && make build_pv_keys 2>&1 | tee /tmp/artifacts/buildocaml.log'
                  environment:
                    DUNE_PROFILE: testnet_postake_medium_curves
                    EXTRA_NIX_ARGS: --option sandbox false
                  no_output_timeout: 20m
            - run:
                  name: Upload generated PV keys
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh scripts/publish-pvkeys.sh
            - run:
                  name: Rebuild for pvkey changes
                  command: |
                    ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'set -o pipefail; eval `opam config env` && make build 2>&1 | tee /tmp/artifacts/buildocaml2.log'
                    ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'eval `opam config env` && dune build src/app/generate_keypair/generate_keypair.exe'
                  environment:
                    DUNE_PROFILE: testnet_postake_medium_curves
                    EXTRA_NIX_ARGS: --option sandbox false

                  no_output_timeout: 20m
            - run:
                  name: Generate runtime ledger with 10k accounts
                  command: |
                    ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'eval `opam config env` && ./_build/default/src/app/runtime_genesis_ledger/runtime_genesis_ledger.exe -n 10000 -account-file genesis_ledgers/phase_three/genesis_ledger.json'
                  no_output_timeout: 20m
            - run:
                  name: Build deb package with PV keys and PV key tar
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh make deb
                  environment:
                    DUNE_PROFILE: testnet_postake_medium_curves
                  no_output_timeout: 20m
            - run:
                  name: Store genesis public/private keypairs
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh make genesiskeys
            - run:
                  name: Upload deb to repo
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh make publish_deb
                  no_output_timeout: 20m
            - run:
                  name: Copy artifacts to cloud
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh scripts/artifacts.sh
            - setup_remote_docker
            - run:
                  name: Build and Upload Docker
                  command: |
                    # Check if we should deploy this build
                    FILE=/tmp/DOCKER_DEPLOY_ENV
                    if test -f "$FILE"; then
                        source $FILE
                        echo "Publishing Docker"
                        echo "Should Publish Docker: $CODA_WAS_PUBLISHED"
                        set -x
                        if [[ "$CODA_WAS_PUBLISHED" = true  ]]; then

                              echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin
                              ./scripts/skip_if_only_frontend_or_rfcs.sh scripts/release-docker.sh \
                              -s coda-daemon \
                              -v $CODA_GIT_TAG-$CODA_GIT_BRANCH-$CODA_GIT_HASH \
                              --extra-args "--build-arg coda_version=$CODA_DEB_VERSION --build-arg deb_repo=$CODA_DEB_REPO"

                              echo "$DOCKER_PASSWORD" | docker login --username $DOCKER_USERNAME --password-stdin
                              ./scripts/skip_if_only_frontend_or_rfcs.sh scripts/release-docker.sh \
                              -s coda-demo \
                              -v $CODA_GIT_TAG-$CODA_GIT_BRANCH-$CODA_GIT_HASH \
                              --extra-args "--build-arg coda_version=$CODA_DEB_VERSION --build-arg deb_repo=$CODA_DEB_REPO"
                        fi
                    fi
            - store_artifacts:
                  path: /tmp/artifacts
    test-unit--dev:
        resource_class: xlarge
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run: ulimit -c unlimited
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Run unit tests
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && dune build --profile=dev -j8 src/app/cli/src/coda.exe src/app/runtime_genesis_ledger/runtime_genesis_ledger.exe && (dune runtest src/lib --profile=dev -j8 || (./scripts/link-coredumps.sh && false))'
                  no_output_timeout: 30m
            - store_artifacts:
                path: core_dumps

    # like the other unit test builds, but only runs tests in src/lib/nonconsensus
    test-unit--nonconsensus_medium_curves:
        resource_class: xlarge
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run: ulimit -c unlimited
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Run unit tests
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && (dune runtest src/nonconsensus --profile=nonconsensus_medium_curves -j8 || (./scripts/link-coredumps.sh && false))'
                  no_output_timeout: 30m
            - store_artifacts:
                path: core_dumps
    test-unit--dev_medium_curves:
        resource_class: xlarge
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run: ulimit -c unlimited
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Run unit tests
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && dune build --profile=dev_medium_curves -j8 && (dune runtest src/lib --profile=dev_medium_curves -j8 || (./scripts/link-coredumps.sh && false))'
                  no_output_timeout: 1h
            - store_artifacts:
                path: core_dumps
    test--fake_hash:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Running test -- fake_hash:full-test
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "fake_hash:full-test"'
            - store_artifacts:
                  path: test_logs
    test--test_postake:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Running test -- test_postake:full-test
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake:full-test"'
            - run:
                  name: Running test -- test_postake:transaction-snark-profiler -k 2
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake:transaction-snark-profiler -k 2"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_bootstrap:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Running test -- test_postake_bootstrap:coda-bootstrap-test
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_bootstrap:coda-bootstrap-test"'
            - run:
                  name: Running test -- test_postake_bootstrap:coda-long-fork -num-block-producers 2
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_bootstrap:coda-long-fork -num-block-producers 2"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_catchup:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Running test -- test_postake_catchup:coda-restart-node-test
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_catchup:coda-restart-node-test"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_delegation:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Running test -- test_postake_delegation:coda-delegation-test
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_delegation:coda-delegation-test"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_five_even_txns:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Running test -- test_postake_five_even_txns:coda-shared-prefix-multiproducer-test -num-block-producers 5 -payments
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_five_even_txns:coda-shared-prefix-multiproducer-test -num-block-producers 5 -payments"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_snarkless:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Running test -- test_postake_snarkless:full-test
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_snarkless:full-test"'
            - run:
                  name: Running test -- test_postake_snarkless:transaction-snark-profiler -k 2
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_snarkless:transaction-snark-profiler -k 2"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_split:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Running test -- test_postake_split:coda-shared-prefix-multiproducer-test -num-block-producers 2
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split:coda-shared-prefix-multiproducer-test -num-block-producers 2"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_split_snarkless:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Running test -- test_postake_split_snarkless:coda-peers-test
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split_snarkless:coda-peers-test"'
            - run:
                  name: Running test -- test_postake_split_snarkless:coda-transitive-peers-test
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split_snarkless:coda-transitive-peers-test"'
            - run:
                  name: Running test -- test_postake_split_snarkless:coda-block-production-test
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split_snarkless:coda-block-production-test"'
            - run:
                  name: Running test -- test_postake_split_snarkless:coda-shared-prefix-test -who-produces 0
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split_snarkless:coda-shared-prefix-test -who-produces 0"'
            - run:
                  name: Running test -- test_postake_split_snarkless:coda-shared-prefix-test -who-produces 1
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split_snarkless:coda-shared-prefix-test -who-produces 1"'
            - run:
                  name: Running test -- test_postake_split_snarkless:coda-change-snark-worker-test
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split_snarkless:coda-change-snark-worker-test"'
            - run:
                  name: Running test -- test_postake_split_snarkless:coda-archive-node-test
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split_snarkless:coda-archive-node-test"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_three_producers:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Running test -- test_postake_three_producers:coda-txns-and-restart-non-producers
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_three_producers:coda-txns-and-restart-non-producers"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_txns:
        resource_class: large
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Running test -- test_postake_txns:coda-shared-state-test
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_txns:coda-shared-state-test"'
            - run:
                  name: Running test -- test_postake_txns:coda-batch-payment-test
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_txns:coda-batch-payment-test"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_full_epoch:
        resource_class: xlarge
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Running test -- test_postake_full_epoch:full-test
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_full_epoch:full-test"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_medium_curves:
        resource_class: xlarge
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Running test -- test_postake_medium_curves:full-test
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_medium_curves:full-test"'
                  no_output_timeout: 20m
            - run:
                  name: Running test -- test_postake_medium_curves:transaction-snark-profiler -k 2
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_medium_curves:transaction-snark-profiler -k 2"'
                  no_output_timeout: 20m
            - store_artifacts:
                  path: test_logs
    test--test_postake_snarkless_medium_curves:
        resource_class: xlarge
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Running test -- test_postake_snarkless_medium_curves:full-test
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_snarkless_medium_curves:full-test"'
            - run:
                  name: Running test -- test_postake_snarkless_medium_curves:transaction-snark-profiler -k 2
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_snarkless_medium_curves:transaction-snark-profiler -k 2"'
            - store_artifacts:
                  path: test_logs
    test--test_postake_split_medium_curves:
        resource_class: xlarge
        docker:
            - image: codaprotocol/coda:toolchain-ccd2abf0c78d6b78024ec6add601aee6fc01044d
        steps:
            - checkout
            - run:
                  name: Update OPAM
                  command: ./scripts/update-opam-in-docker.sh
            - run:
                name: Build libp2p_helper
                command: make libp2p_helper
            - run:
                  name: Running test -- test_postake_split_medium_curves:coda-shared-prefix-multiproducer-test -num-block-producers 2
                  command: ./scripts/skip_if_only_frontend_or_rfcs.sh bash -c 'source ~/.profile && ./scripts/test.py run "test_postake_split_medium_curves:coda-shared-prefix-multiproducer-test -num-block-producers 2"'
            - store_artifacts:
                  path: test_logs

workflows:
    version: 2
    coda_parallel:
        jobs:
            - lint
            - lint-opt
            - compare-test-signatures
            - update-branch-protection:
                filters:
                  branches:
                    only: develop
            - tracetool
            - build-wallet
            - test-archive
            - build-archive
            - build-macos
            - build-client-sdk
            - build-artifacts--testnet_postake_medium_curves
            - test-unit--dev
            - test-unit--nonconsensus_medium_curves
            - test--fake_hash
            - test--test_postake
            - test--test_postake_bootstrap
            - test--test_postake_catchup
            - test--test_postake_delegation
            - test--test_postake_five_even_txns
            - test--test_postake_snarkless
            - test--test_postake_split
            - test--test_postake_split_snarkless
            - test--test_postake_three_producers
            - test--test_postake_txns

    daily:
        triggers:
          - schedule:
              cron: "0 12 * * *"
              filters:
                branches:
                  only:
                    - develop
                    - /release\/.*/
        jobs:
          - test-unit--dev_medium_curves
          - test--test_postake_full_epoch
          - test--test_postake_medium_curves
          - test--test_postake_snarkless_medium_curves
          - test--test_postake_split_medium_curves